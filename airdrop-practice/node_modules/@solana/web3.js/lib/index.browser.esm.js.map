{"version":3,"file":"index.browser.esm.js","sources":["../src/utils/to-buffer.ts","../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/_sha2.js","../node_modules/@noble/hashes/esm/sha256.js","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/message/legacy.ts","../src/utils/assert.ts","../src/transaction/legacy.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@noble/secp256k1/lib/esm/index.js","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(buffer);\n    return new PublicKey(hash);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const hash = sha256(buffer);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {CompiledInstruction, MessageHeader} from './index';\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = 2n ** 64n - 1n;\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: new Message(result.transaction.message),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (!(this.iHash instanceof Hash))\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        const blockLen = (this.blockLen = this.iHash.blockLen);\n        this.outputLen = this.iHash.outputLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst POW_2_256 = _2n ** BigInt(256);\nconst CURVE = {\n    a: _0n,\n    b: BigInt(7),\n    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n};\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(B ** _2n);\n        const D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E ** _2n);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H ** _2n);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r ** _2n - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.y & _1n ? '03' : '02';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = isUint8a(hex);\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = isUint8a(hex);\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every(isUint8a))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction isUint8a(bytes) {\n    return bytes instanceof Uint8Array;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction numTo32bStr(num) {\n    if (num > POW_2_256)\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    return hexToBytes(numTo32bStr(num));\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst POW_2_128 = _2n ** BigInt(128);\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n    const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n    const b2 = a1;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        if (typeof utils.hmacSha256Sync !== 'function')\n            throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\n        const res = utils.hmacSha256Sync(this.k, ...values);\n        if (res instanceof Promise)\n            throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\n        return res;\n    }\n    incr() {\n        if (this.counter >= 1000) {\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        }\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (isUint8a(key)) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isPub(item) {\n    const arr = isUint8a(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    const hex = numTo32bStr(num);\n    return hexToBytes(hex);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction finalizeSchnorrChallenge(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nfunction hasEvenY(point) {\n    return (point.y & _1n) === _0n;\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nfunction initSchnorrSigArgs(message, privateKey, auxRand) {\n    if (message == null)\n        throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n    const m = ensureBytes(message);\n    const d0 = normalizePrivateKey(privateKey);\n    const rand = ensureBytes(auxRand);\n    if (rand.length !== 32)\n        throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    const P = Point.fromPrivateKey(d0);\n    const px = P.toRawX();\n    const d = hasEvenY(P) ? d0 : CURVE.n - d0;\n    return { m, P, px, d, rand };\n}\nfunction initSchnorrNonce(d, t0h) {\n    return numTo32b(d ^ bytesToNumber(t0h));\n}\nfunction finalizeSchnorrNonce(k0h) {\n    const k0 = mod(bytesToNumber(k0h), CURVE.n);\n    if (k0 === _0n)\n        throw new Error('sign: Creation of signature failed. k is zero');\n    const R = Point.fromPrivateKey(k0);\n    const rx = R.toRawX();\n    const k = hasEvenY(R) ? k0 : CURVE.n - k0;\n    return { R, rx, k };\n}\nfunction finalizeSchnorrSig(R, k, e, d) {\n    return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n}\nasync function schnorrSign(message, privateKey, auxRand = utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, await utils.taggedHash(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(await utils.taggedHash(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = await schnorrVerify(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction schnorrSignSync(message, privateKey, auxRand = utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, utils.taggedHashSync(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(utils.taggedHashSync(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = schnorrVerifySync(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !hasEvenY(R) || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    privateAdd: (privateKey, tweak) => {\n        const p = normalizePrivateKey(privateKey);\n        const t = normalizePrivateKey(tweak);\n        return numTo32b(mod(p + t, CURVE.n));\n    },\n    privateNegate: (privateKey) => {\n        const p = normalizePrivateKey(privateKey);\n        return numTo32b(CURVE.n - p);\n    },\n    pointAddScalar: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = normalizePrivateKey(tweak);\n        const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\n        if (!Q)\n            throw new Error('Tweaked point at infinity');\n        return Q.toRawBytes(isCompressed);\n    },\n    pointMultiply: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = bytesToNumber(ensureBytes(tweak));\n        return P.multiply(t).toRawBytes(isCompressed);\n    },\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof utils.sha256Sync !== 'function')\n            throw new Error('utils.sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = utils.sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","assert","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","createProgramAddressSync","seeds","forEach","TypeError","publicKeyBytes","toArray","is_on_curve","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","isOnCurve","pubkeyData","pubkey","default","set","kind","fields","naclLowLevel","nacl","lowlevel","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","Message","args","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","slice","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","condition","message","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","isSigner","isWritable","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","call","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","accountMeta","includes","uniqueMetas","pubkeyString","uniqueIndex","findIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","splice","unshift","signedKeys","unsignedKeys","compiledInstructions","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","globalThis","fetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","state","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","addresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","url","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","fetchImpl","fetchWithMiddleware","info","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","agent","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","readonly","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","ParsedConfirmedTransactionMetaResult","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfoAndContext","publicKeys","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","TIMED_OUT","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","rawConfig","_buildArgsAtLeastConfirmed","getBlockProduction","extra","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountKey","accountInfo","getNonceAndContext","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","includeAccounts","originalTx","encodedTransaction","sigVerify","traceIndent","logTrace","join","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","delete","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","Number","decodeExtendLookupTable","lookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","hmacSha256Sync","msgs","h","hmac","msg","update","digest","ecdsaSign","msgHash","privKey","der","recovered","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","buf","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":"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"}